; All filenames can include a path.  In this program, all files
; will default to sensible 'current directory' files if they aren't
; specified.
;
; Numbers can be immediately followed by a 'k' to mean *1024 (kilo), or
; a 'm' to mean *1048576 (mega)
;
; Lines should be NO MORE than 128 characters long.
;
; Frankly, none of these items in this file are absolutely required
; because they all have somewhat reasonable defaults.  But, good settings
; can make the program run better.
;
[Program]
Title=Carey Bloodworth's fast AGM pi program.

[Memory]
; The amount of memory that the program can safely assume to be
; regular physical 'core' memory, without virtual memory kicking in.
;
; This shouldn't be the actual amount of physical memory you have, because
; the program and OS will need some for themselves.  Round the actual
; amount of physical memory you have (or whatever the OS gives) down
; to the next lower power of two.  64m would be 32m.  32m would be 16m.
; 36m (with DOS) would be 32m.
;
; The ntt has a memory requirement of Digits/(primes/2).  That means
; 32m requires at *least* 8m of phys mem.   64m digits takes at
; *least* 16m, etc.  It prefers Digits*4 if at all possible.  More
; memory will be fine, just ignored.  (The FFT needs Digis*4, and
; Digits*8 if possible.)  (Actually the program can manage with
; less, using the FractalMul, but it increases runtime.)
; The formulas that do only 'half sized' muls only need half as
; much, of course.
;
; Default is to assume that _all_ memory is physical.
Physical=32m

; The amount of memory that you can safely spare for the program
; to use as a disk buffer/cache.  This value and the physical mem
; setting above should total less than the available memory actually
; available.  Ex: Have 64m, give 32m to above, 16m for here, and leave
; 16m for your OS.  Ex: have 384m, give 256m to above, 64m for here,
; and leave 64m for your OS.  This is a poor man's disk read cache.
; If you use this, turn off your OS's disk read & write caching.
; (Write caching should already be turned off, anyway.)
DiskBuffer=0

; Usually half the size of your L1 or L2 cache. 128k is a popular
; size for Pentiums with 256k of L2 cache.  4k might work well
; on older 486's.  Default is 128k. If you specify a 0, the program
; will attempt to detect a good setting, and then update this pi.ini
; file.  This is *NOT* optimal.  This may take several minutes.
; It wont be accurate if you specify too few digits of pi to compute
; or too little memory above.
; Also, what is best may depend on the FFT or NTT.  It might even
; be ignored entirely.
Cache=128k

; The size of the internal fixed size buffer.  Used for a variety of
; purposes.  128k is enough for most things.  32m+ digits of pi
; might want this set at 1m or more.  Default is 128k.
Buffer=128k


[Settings]
;; 'Boolean' settings can be Yes/True or No/False.
;
; Whether to pass the arguments on the command line, or have the program
; prompt you.  This can be forced to 'No' by a compile time option.
UseCommandLine=Yes
; Delete the save file after you've loaded it.  Saves memory,
; but is risky if the program crashes later.
DeleteSaveFile=No
; Do a few minor things a little differently for the Mac.
Macintosh=No
; 0=raw, unformatted 00..99 binary dump.  2 digits per byte.
; 1=Guttenberg pi file format.  50 dig, space every 10, 3 blank after 1000
; 2=SuerPi.  50 dig per line, space very 10, 1 blank every 1000 digits.
; 3=Japanese archive. (Default.) 100 dig. space every 10, no blank lines.
OutputFormat=3
; Whether to dump a lot of debugging stuff!  Not recommended unless debuggin!
; (Or unless you just happen to be the kind to like watching that stuff.)
DumpDebug=No
; Save the data after every iteration
AlwaysSaveData=No
; Use the fast AGM.  Takes more storage.
UseFastAGM=Yes
; print CRCs during save & load of data?
UseCRC=No
; Save pi to a file or print to the screen?
SavePiToFile=Yes
; Whether to allow the use of the slower 'FractalMul'.  If not, then
; the program must do every multiplication within memory.  Default is Yes.
AllowFractalMul=Yes
; Whether to perform a self check in the Fast AGM.  See docs and agm.c
; Not recommended because it's not 100% accurate and takes extra time.
; 0=none  (default and recommended.)
; 1=simple
; 2=simple + AGM_A
; 3=simple + AGM_B
; 4=simple + AGM_A + AGM_B
AGMSelfCheck=0

[Files]
; Where to save the data between runs.
SaveFile=piceb.sav
; The file to use to merge the partial NTT multiplication results.
NTT_Merge=pinttme.rge
; The file used to store the first number of a two number multiplication.
Convolution=piconvl.tmp
; The file used for the pi output.
; This is a 'C' style sprintf() *MASK*, not actual filename.  You
; can put a path on it, of course.
Pi_Outfile_Mask=pi%s.txt

[DiskNumbers]
; Where the disk number version will store its data (ie: the big
; variable numbers.)  Each file represents one number.  Up to 9
; variables will be used.  The AGM uses 6.  The Fast AGM uses 8.
; The Borwein uses 7.  And one extra (double length) variable might
; be used if the FractalMul() kicks in due to limited memory.
Var1=pivar1.tmp
Var2=pivar2.tmp
Var3=pivar3.tmp
Var4=pivar4.tmp
Var5=pivar5.tmp
Var6=pivar6.tmp
Var7=pivar7.tmp
Var8=pivar8.tmp
Var9=pivar9.tmp

[FFT-Cache]
; The maximum number of NTT caches that will get used.  Each entry will
; take 128 bytes.  Unless the FractalMul() kicks in, you only need a few,
; but we might as well allow more, just in case.
; A setting of zero disables caching.
MaxCaches=30
; The filenames for the caches.  You don't have to specify them all.
; I'm just showing a few for example.  If needed, filenames in the
; current directory will be created for any 'MaxCaches' caches that
; you don't specify.
Cache1=cache1.tmp
Cache2=cache2.tmp
Cache3=cache3.tmp
Cache4=cache4.tmp
Cache5=cache5.tmp
Cache6=cache6.tmp
Cache7=cache7.tmp
Cache8=cache8.tmp
Cache9=cache9.tmp
Cache10=cache10.tmp

[RunTime]
; The following three settings are the values that the program
; expects from the command line or prompts you at run time.
; _IF_ and _ONLY_IF_ all three values are given to be non-zero,
; then the program will use these values instead.  If not, then
; these values will be ignored.
;
; Which pi formula to use?
; 1  means the classic, memory frugal AGM
; 2  means the regular Salamin 1/sqrt(2) AGM
; 3  means the alternative 'sqrt(3)' AGM
; 4  means to use the Borwein Quartic (ie: 4) formula
; Anything else non-zero means to use the Salamin AGM.
PiFormulaToUse=2;
; How many digits to compute?
DigitsToCompute=0
; How many passes of the iterative formula should we compute?
; -1 means to compute all of them.
PassesToCompute=-1



